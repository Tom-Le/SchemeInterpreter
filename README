Experimental Scheme interpreter
===============================

To compile, at the prompt, type:

    $ make

To execute the interpreter after compiling:

    $ ./scheme

Built-in procedures
-------------------

Basic operations:

    quote
    define
    lambda
    let
    exit

Scheme pair and list operations:

    cons
    car
    cdr
    cadr, caddr, cadddr, caddddr
    last
    append
    list
    length

Predicates:

    equal?
    list?
    symbol?
    number?
    procedure?
    null?

Conditional operations:

    cond
    if
    assoc

Arithmetic operations:

    +
    -
    *

Boolean operations:

    and
    or
    not

Relational operations:

    >
    <
    >=
    <=
    =

Notes on program structure
--------------------------

There are 4 main modules:

   - The main program in `main.h` and `main.c`.
   - The lexical analyzer in `lexer.h` and `lexer.c`.
   - The Scheme expression parser in `parser.h` and `parser.c`.
   - The Scheme expression evaluator in `eval.h` and `eval.c`.

There are 9 Scheme data types:

   - Scheme element: An abstract type, represents any Scheme element. Implemented in `scheme-element.h`, `scheme-element-private.h`, and
     `scheme-element.c`.
   - Number: Represents an integer. Implemented in `scheme-number.h` and `scheme-number.c`.
   - Boolean symbol: Represents a boolean symbol (#t or #f). Implemented in `scheme-boolean.h` and `scheme-boolean.c`.
   - Symbol: Represents a generic string of characters. Implemented in `scheme-symbol.h` and `scheme-symbol.c`.
   - Pair: Represents a pair of two elements. Implemented in `scheme-pair.h` and `scheme-pair.c`. Note that a Scheme list is defined to be
     either the empty pair or a pair whose second element is also a list.
   - Void symbol: Represents no output. Implemented in `scheme-void.h` and `scheme-void.c`.
   - Procedure: Represents a procedure, which contains a C function that can evaluate a Scheme element and return the result. Implemented in
     `scheme-procedure.h`, `scheme-procedure-init.h` and `scheme-procedure.c`.
   - Lambda procedure: Represents a procedure created by the procedure `lambda`. It contains a list of argument identifiers, a list of
     expressions, and a C function that assigns values from a given Scheme pair to the identifiers then evaluate the expressions
     sequentially, returning the result of the last evaluation. It is defined in `scheme-lambda.h` and `scheme-lambda.c`.
   - Namespace: Maps symbols to Scheme elements. Implemented in `scheme-namespace.h` and `scheme-namespace.c`. The main program sets up a
     base namespace containing built-in procedures before parsing expressions from standard input.

Each procedure listed above is implemented in `procedure-[name].h` and `procedure-[name].c`. They are listed in `procedures.h`.

Most expressions in Scheme are in the form of `(<procedure> <argument> ...)`. The evaluator will pass `(<argument> ...)` to the specified
procedure's C function. More accurately, these expressions are in the form of `(<procedure> . <element>)`, and the evaluator passes
`<element>` to the specified procedure's C function.
